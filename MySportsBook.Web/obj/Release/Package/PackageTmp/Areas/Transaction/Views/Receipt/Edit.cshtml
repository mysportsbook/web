@model MySportsBook.Model.Transaction_Receipt
@{
    ViewBag.Title = "Edit Receipt";
    if (ViewContext.ViewBag.IsAdmin != null && ViewContext.ViewBag.IsAdmin) { Layout = "/Views/Shared/Layout/_AdminLayout.cshtml"; } else { Layout = "/Views/Shared/Layout/_Layout.cshtml"; }
}
<main class="main">
    <!-- Breadcrumb-->
    <ol class="breadcrumb">
        <li class="breadcrumb-item">Home</li>
        <li class="breadcrumb-item">@Html.ActionLink("Receipt", "Edit")</li>
        <li class="breadcrumb-item active">Edit</li>
    </ol>
    <div class="container-fluid">
        <div class="animated fadeIn">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-sm-8">
                                        <strong>Edit Receipt</strong>
                                    </div>
                                    <div class="col-sm-4">

                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.PK_ReceiptId)
                                    @Html.HiddenFor(model => model.Transaction_Invoice.Master_Player.PK_PlayerId)
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ReceiptNumber, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.ReceiptNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ReceiptDate, htmlAttributes: new { @class = "control-label" })
                                            @Html.TextBox("ReceiptDate", Model.ReceiptDate.ToString("dd MMM yyyy"), new { @class = "form-control date1" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Transaction_Invoice.Master_Player.FirstName, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Transaction_Invoice.Master_Player.FirstName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Transaction_Invoice.Master_Player.Mobile, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Transaction_Invoice.Master_Player.Mobile, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.Label("Payment Mode")
                                            @Html.DropDownList("PaymentMode", null, htmlAttributes: new { @class = "form-control", @tabindex = 6 })
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.Label("Received By")
                                            @Html.DropDownList("ReceivedBy", null, htmlAttributes: new { @class = "form-control", @tabindex = 5 })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TransactionNumber, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.TransactionNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TransactionDate, htmlAttributes: new { @class = "control-label" })
                                            @Html.TextBox("TransactionDate", (Model.TransactionDate.HasValue ? Model.TransactionDate.Value.ToString("dd MMM yyyy") : string.Empty), new { @class = "form-control date1" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            @Html.Label("Comments", htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TotalFee, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.TotalFee, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled  text-right" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Credit Amount")
                                            @Html.TextBox("CreditAmount", (Model.CreditAmount.HasValue ? Model.CreditAmount.Value : 0).ToString("0.00"), new { @class = "form-control  text-right", @disabled = "disabled" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Other Amount")
                                            @Html.EditorFor(model => model.TotalOtherAmount, new { htmlAttributes = new { @class = "form-control  text-right" } })

                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Discount")
                                            @Html.EditorFor(model => model.TotalDiscountAmount, new { htmlAttributes = new { @class = "form-control  text-right" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Paid Amount")
                                            @Html.EditorFor(model => model.AmountPaid, new { htmlAttributes = new { @class = "form-control  text-right" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Balance")
                                            @Html.TextBox("Balance", "0.00", new { @readonly = "true", @class = "form-control text-right", @tabindex = "-1" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-sm btn-primary btn-submit" type="button" id="btnSumbit">
                                    <i class="fa fa-cloud-upload"></i> Save Changes
                                </button>
                                <button class="btn btn-sm btn-danger" type="reset">
                                    <i class="fa fa-reply"></i> Back
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-sm-9">
                                        <strong>Invoice</strong>
                                    </div>

                                </div>
                            </div>
                            <div class="card-body">
                                <table class="table table-striped table-bordered table-responsive-sm table-hover table-outline mb-0" style="width:100%">
                                    <thead class="thead-light">
                                        <tr>
                                            <th>
                                                Period
                                            </th>
                                            <th>
                                                Amount to be paid
                                            </th>
                                            <th>
                                                Amountpaid
                                            </th>
                                            <th>
                                                Close
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.Transaction_Invoice.Transaction_InvoiceDetail)
                                        {
                                            <tr class="InvoiceDetailModel">
                                                <td>
                                                    <span>@Html.DisplayFor(modelItem => item.InvoicePeriod)</span>
                                                </td>
                                                <td>
                                                    @Html.EditorFor(modelItem => item.BatchAmount, new { htmlAttributes = new { @class = "form-control batchamount text-right" } })
                                                    @Html.HiddenFor(modelItem => item.BatchAmount, new { @class = "hidbatchamount" })
                                                    <smaller><span class="amountdiscription"></span></smaller>
                                                </td>
                                                <td>
                                                    @Html.EditorFor(modelItem => item.PaidAmount, new { htmlAttributes = new { @class = "form-control paidamount text-right", @disabled = "disabled" } })
                                                </td>
                                                <td>
                                                    @Html.CheckBox("chkClose", (item.PaidAmount == 0), new { @class = "form-control chkClose" })
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="row justify-content-center align-self-center" style="float:right">
                                    <div class="foo closecolor"></div><small>While be <b>CLOSED AUTOMATICALLY BY SYSTEM</b></small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</main>
@Html.Partial("~/Views/Shared/Script/_DateTimePicker.cshtml")
<script type="text/javascript">
    $(document).ready(() => {
        $('.date1').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            minYear: 2000,
            locale: {
                format: 'DD MMM YYYY'
            }
        });
        $('.btn-submit').click(() => {
            loader();
            var invoiceDetails = [];
            $('.InvoiceDetailModel').each(function (key, value) {
                var inv = {
                    "InvoicePeriod": $(value).find("span").html(),
                    "BatchAmount": $(value).find(".batchamount").val(),
                    "PaidAmount": $(value).find(".paidamount").val(),
                    "ShouldClose": $($(value).find(".chkClose")).is(":checked")
                };
                invoiceDetails.push(inv);
            });
            var invoiceModel = {
                ReceiptId: $("input[name$=PK_ReceiptId]").val(),
                ReceiptNumber: $('#ReceiptNumber').val(),
                PlayerId: $("input[name$=PK_PlayerId]").val(),
                TotalFee: parseFloat($('#TotalFee').val()),
                TotalOtherAmount: parseFloat($('#TotalOtherAmount').val()),
                TotalDiscount: parseFloat($('#TotalDiscountAmount').val()),
                TotalPaidAmount: parseFloat($('#AmountPaid').val()),
                ExtraPaidAmount: parseFloat($('#CreditAmount').val()),
                PaymentId: $('select[name="PaymentMode"]').val(),
                Comments: $('#Description').val(),
                TransactionNo: $('#PaymentMode').val() != "1" ? $('#TransactionNumber').val() : '',
                TransactionDate: $('#PaymentMode').val() != "1" ? $('#TransactionDate').val() : null,
                InvoiceDate: $('#ReceiptDate').val(),
                ReceivedBy: $('select[name="ReceivedBy"]').val(),
                InvoiceDetails: invoiceDetails
            }
            $.ajax({
                type: "POST",
                url: "/Receipt/Edit",
                data: { invoiceModel: invoiceModel },
                success: function (data) {
                    loader();
                    if (response) {
                        swal({
                            title: "Success!",
                            text: "Updated sucessfully!",
                            type: "success",
                            icon: "success",
                            showCancelButton: false,
                            confirmButtonClass: "btn-success",
                            confirmButtonText: "Ok!",
                            closeOnConfirm: false
                        });
                    }
                    else {
                        swal("Failed!", "Failed!", "error", {
                            icon: "error"
                        });
                    }
                },
                error: function (jqXHR, exception) {
                    console.log(exception);
                }
            });
        });
        $('.batchamount').blur(() => {
            calculateTotalFee();
            calculate();
        });
        $('.chkClose').change(() => {
            addRemoveButton();
            calculate();
        });
        $('#AmountPaid,#TotalOtherAmount,#TotalDiscountAmount').blur(() => {
            calculate();
        });
        addRemoveButton();
        calculate();
    });

    const calculateTotalFee = () => {
        let _totalFee = 0;
        $('.hidbatchamount').each(function () {
            if (!$(this).closest('tr').find('.chkClose').is(':checked'))
                _totalFee += parseFloat($(this).val())
        });
        $('#TotalFee').val(_totalFee.toFixed(2));
        return _totalFee;
    };
    const splitAmount = () => {
        resetBatchAmount();
        let _count = 1;
        let _paidFee = parseFloat($('#AmountPaid').val()) + parseFloat($('#CreditAmount').val());
        $('.amountdiscription').text('');
        $($(".chkClose").get().reverse()).each(function () {
            if (!$(this).is(':checked')) {
                let _batchFee = 0;
                _batchFee = parseFloat($(this).closest('tr').find('.batchamount').val());
                if (_count == 1) {
                    _batchFee += parseFloat($('#TotalOtherAmount').val()) - parseFloat($('#TotalDiscountAmount').val()) - parseFloat($('#CreditAmount').val())
                    $(this).closest('tr').find('.batchamount').val(_batchFee.toFixed(2))
                    _count = _count + 1;
                    if (parseFloat($('#TotalOtherAmount').val()) != 0 || parseFloat($('#TotalDiscountAmount').val()) != 0) {

                        let _result = "(" + parseFloat($(this).closest('tr').find('.hidbatchamount').val()).toFixed(2).toString();
                        if (parseFloat($('#TotalOtherAmount').val()) != 0)
                            _result = _result + "+" + parseFloat($('#TotalOtherAmount').val()).toFixed(2).toString();
                        if (parseFloat($('#TotalDiscountAmount').val()) != 0)
                            _result = _result + "-" + parseFloat($('#TotalDiscountAmount').val()).toFixed(2).toString();
                        _result = _result + "=" + _batchFee.toFixed(2).toString() + ")";
                        $(this).closest('tr').find('.amountdiscription').text(_result)
                    }
                }
                if (_paidFee > _batchFee) {
                    $(this).closest('tr').find('.paidamount').val(_batchFee.toFixed(2));
                    _paidFee = parseFloat(_paidFee) - parseFloat(_batchFee);
                }
                else {
                    $(this).closest('tr').find('.paidamount').val(_paidFee.toFixed(2));
                    _paidFee = parseFloat(0);
                }

            }
            else {
                $(this).closest('tr').find('.paidamount').val('0.00');
            }
        });
    };
    const calculate = () => {
        splitAmount();
        let _totalFee = calculateTotalFee();
        let _otherFee = (parseFloat($('#AmountPaid').val()) + parseFloat($('#CreditAmount').val()) - parseFloat($('#TotalOtherAmount').val()) + parseFloat($('#TotalDiscountAmount').val()));
        $('#Balance').val((_otherFee - _totalFee).toFixed(2)).css("background-color", (parseFloat($('#Balance').val()) < 0) ? "#D46A6A" : "#5FAE57");
        setColor();
    };
    const removeRow = (e) => {
        var _count = $('.chkClose:input:not(:checked)').length;
        $(e).closest('tr').remove();
        addRemoveButton();
        calculate();
    };
    const addRemoveButton = () => {
        var $row = $('.table tbody').find('tr:first');
        $row.find('.chkClose').removeAttr('checked').attr('disabled', 'disabled');
        if (!$row.find('i').hasClass("removeRow"))
            $row.append('<td><i class="fa fa-times fa-2x removeRow" onclick="removeRow(this)" style="cursor: pointer;" ></i></td>')

    };
    const resetBatchAmount = () => {
        $('.batchamount').each(function () {
            $(this).val(parseFloat($(this).next('.hidbatchamount').val()).toFixed(2));
        });
    }
    const setColor = () => {
        $('.paidamount').each(function () {
            if (parseFloat($(this).val()) == 0 && $(this).closest('tr').find('.chkClose').is(':checked')) {
                $(this).closest('tr').css('background-color', '#f86c6b');
            }
            else {
                $(this).closest('tr').css('background-color', 'rgba(0,0,0,.05)');
            }
        });

    }

    const addRow = () => {
        let _row = '<tr class="InvoiceDetailModel">';
        var _month = $('.table tbody').find('tr:first').find('span');
        var _batchAmount = parseFloat($('.table tbody').find('tr:first').find('.hidbatchamount').val()).toFixed(2);
        _row = _row + '<td><span>APR2019</span></td>';
        _row = _row + '<td><input class="form-control batchamount text-right text-box single-line" data-val="true" data-val-number="The field BatchAmount must be a number." data-val-required="The BatchAmount field is required." id="item_BatchAmount" name="item.BatchAmount" type="text" value="' + _batchAmount + '">';
        _row = _row + '<input class="hidbatchamount" id="item_BatchAmount" name="item.BatchAmount" type="hidden" value="' + _batchAmount + '">';
        _row = _row + '<smaller><span class="amountdiscription"></span></smaller></td>';
        _row = _row + '<td><input class="form-control paidamount text-right text-box single-line" data-val="true" disabled="disabled" id="item_PaidAmount" name="item.PaidAmount" type="text" value="0.00"></td>';
        _row = _row + '<td><input class="form-control chkClose" id="chkClose" name="chkClose" type="checkbox" value="true" disabled="disabled"><input name="chkClose" type="hidden" value="false"></td></tr>';
        calculate();
    }
</script>
<style>
    .foo {
        float: left;
        width: 15px;
        height: 15px;
        margin: 5px;
        border: 1px solid rgba(0, 0, 0, .2);
    }

    .closecolor {
        background: #f86c6b;
    }

    .align-middle {
        vertical-align: middle !important;
    }

    small {
        margin: 5px;
    }
</style>