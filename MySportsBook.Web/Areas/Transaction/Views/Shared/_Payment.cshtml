@model MySportsBook.Model.ViewModel.InvoiceModel
<div class="row">
    @if (Model.NoDues)
    {
        <div class="col-sm-12">
            <span><strong>No Pending due(s).</strong></span>
        </div>
    }
    else
    {
        <div class="col-sm-5">
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Batch</th>
                        <th scope="col">Sport</th>
                        <th scope="col">Month</th>
                        <th scope="col">Amount</th>
                        <th scope="col"><input type="checkbox" class="inv-list-all" /></th>
                    </tr>
                </thead>
                @foreach (MySportsBook.Model.ViewModel.InvoiceDetailModel detail in Model.InvoiceDetails)
                {
                <tr>
                    <td>@detail.BatchName</td>
                    <td>@detail.SportName</td>
                    <td>@detail.InvoicePeriod</td>
                    <td><label class="inv-amount">@detail.Fee.ToString("0.00")</label></td>
                    <td>
                        <input type="checkbox" class="inv-list" />
                        <input id="hidbatch" type="hidden" class="inv-batch-id" name="hidbatch" value="@detail.BatchId" />
                        <input id="hidinvperiodid" type="hidden" class="inv-period-id" name="hidinvperiodid" value="@detail.InvoicePeriodId" />
                        <input id="hidinvperiod" type="hidden" class="inv-period" name="hidinvperiod" value="@detail.InvoicePeriod" />
                        <input id="hidinvfee" type="hidden" class="inv-fee" name="hidinvfee" value="@detail.Fee" />
                        <input id="hidinvserno" type="hidden" class="inv-fee" name="hidinvserno" value="@detail.PayOrder" />
                    </td>
                </tr>
                }
            </table>
        </div>
        <div class="col-sm-7">
            <div class="row">
                <div class="col-sm-3">
                    @Html.Label("Inv Date")
                </div>
                <div class="col-sm-3">
                    @Html.TextBox("InvoiceDate", "", new { @class = "form-control date", @tabindex = 1 })
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Received By")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.DropDownList("ReceivedBy", null, htmlAttributes: new { @class = "form-control", @tabindex = 5 })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Total Fee")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtTotalFee", "0.00", new { @readonly = "true", @class = "form-control text-right", @tabindex = "-1" })
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Payment Mode")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.DropDownList("PaymentMode", null, htmlAttributes: new { @class = "form-control", @tabindex = 6 })
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Discount(-)")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtDiscount", "0.00", new { @class = "form-control text-right", @tabindex = 2 })
                    </div>
                </div>
                <div class="col-sm-3 transaction" style="display:none">
                    <div class="form-group">
                        @Html.Label("Trans/Cheque#")
                    </div>
                </div>
                <div class="col-sm-3 transaction" style="display:none">
                    <div class="form-group">
                        @Html.TextBox("TransactionNo", "", new { @class = "form-control", @tabindex = 7 })
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("OtherAmount(+)")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtLateFee", "0.00", new { @class = "form-control text-right", @tabindex = 3 })
                    </div>
                </div>
                <div class="col-sm-3 transaction" style="display:none">
                    @Html.Label("Trans/Cheque Date")
                </div>
                <div class="col-sm-3 transaction" style="display:none">
                    @Html.TextBox("TransactionDate", "", new { @class = "form-control date", @tabindex = 8 })
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Total")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtTotal", "0.00", new { @readonly = "true", @class = "form-control text-right", @tabindex = "-1" })
                    </div>
                </div>
                <div class="col-sm-3">
                    @Html.Label("Comments")
                </div>
                <div class="col-sm-3">
                    @Html.TextArea("txtComments", new { @class = "form-control", @tabindex = 9 })
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Paid")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtPaid", "0.00", new { @class = "form-control text-right", @tabindex = 4 })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.Label("Balance")
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.TextBox("txtBalance", "0.00", new { @readonly = "true", @class = "form-control text-right", @tabindex = "-1" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="offset-md-9 col-sm-3">
                    <button type="button" class="btn btn-primary btn-block" onclick="confirmation()" tabindex="10">Pay</button>
                    @Html.HiddenFor(model => model.PlayerId)
                </div>
            </div>
        </div>
    }
</div>
<script>
    var success = "SUCCESS";
    $('#PaymentMode').change(function () {
        //Cash
        if ($('#PaymentMode').val() == "1") {
            $('.transaction').css('display', 'none');
        }
        else {
            $('.transaction').removeAttr('style');
        }
    });
    $('.date').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        minYear: 2000,
        locale: {
            format: 'DD MMM YYYY'
        }
    });
    $('.inv-list-all').click(function () {
        $('.inv-list').prop("checked", $(this).is(":checked"));
        calculateonCheckbox();
    });
    $('.inv-list').click(function () {
        calculateonCheckbox();
    });
    $('#txtDiscount,#txtPaid,#txtLateFee').on('blur', function () {
        calculate();
    });
    function calculate() {
        var total = 0;
        var checkall = true;
        $('.inv-list').each(function () {
            if ($(this).is(":checked")) {
                total += parseFloat($(this).parent().parent().find('label').text());
            }
            else if (checkall) { checkall = false; }
            $('.inv-list-all').prop("checked", checkall);
        });
        $('#txtTotalFee').val(total.toFixed(2));
        $('#txtLateFee').val(parseFloat($('#txtLateFee').val() == "" ? 0 : $('#txtLateFee').val()).toFixed(2));
        $('#txtTotalFee').val(parseFloat($('#txtTotalFee').val() == "" ? 0 : $('#txtTotalFee').val()).toFixed(2));
        $('#txtDiscount').val(parseFloat($('#txtDiscount').val() == "" ? 0 : $('#txtDiscount').val()).toFixed(2));
        $('#txtTotal').val((parseFloat($('#txtLateFee').val()) + parseFloat($('#txtTotalFee').val()) - parseFloat($('#txtDiscount').val())).toFixed(2));
        $('#txtPaid').val(parseFloat($('#txtPaid').val() == "" ? 0 : $('#txtPaid').val()).toFixed(2));
        $('#txtBalance').val((parseFloat($('#txtPaid').val()) - parseFloat($('#txtTotal').val())).toFixed(2));
        $('#txtBalance').css("background-color", (parseFloat($('#txtBalance').val()) < 0) ? "#D46A6A" : "#5FAE57");
    }
    function calculateonCheckbox() {
        var total = 0;
        var checkall = true;
        $('.inv-list').each(function () {
            if ($(this).is(":checked")) {
                total += parseFloat($(this).parent().parent().find('label').text());
            }
            else if (checkall) { checkall = false; }
            $('.inv-list-all').prop("checked", checkall);
        });
        $('#txtTotalFee').val(total.toFixed(2));
        $('#txtLateFee').val(parseFloat($('#txtLateFee').val() == "" ? 0 : $('#txtLateFee').val()).toFixed(2));
        $('#txtTotalFee').val(parseFloat($('#txtTotalFee').val() == "" ? 0 : $('#txtTotalFee').val()).toFixed(2));
        $('#txtDiscount').val(parseFloat($('#txtDiscount').val() == "" ? 0 : $('#txtDiscount').val()).toFixed(2));
        $('#txtTotal').val((parseFloat($('#txtLateFee').val()) + parseFloat($('#txtTotalFee').val()) - parseFloat($('#txtDiscount').val())).toFixed(2));
        $('#txtPaid').val(parseFloat($('#txtTotal').val()).toFixed(2));
        $('#txtBalance').val((parseFloat($('#txtPaid').val()) - parseFloat($('#txtTotal').val())).toFixed(2));
        $('#txtBalance').css("background-color", (parseFloat($('#txtBalance').val()) < 0) ? "#D46A6A" : "#5FAE57");
    }
    function confirmation() {
        if (parseFloat($('#txtTotal').val()) == parseFloat($('#txtPaid').val())) {
            payment();
        }
        else {
            swal({
                title: "Are you sure?",
                text: "You want to generate a receipt!",
                icon: "warning",
                buttons: true,
            }).then((confirm) => {
                if (confirm) {
                    payment();
                }
            });
        }
    }
    function payment() {
        try {
            loader();
            var invoicedetails = [];
            $('.inv-list').each(function () {
                if ($(this).is(":checked")) {
                    invoicedetails.push({
                        BatchId: parseInt($(this).parent().find('input[name="hidbatch"]').val().trim()),
                        InvoicePeriodId: parseInt($(this).parent().find('input[name="hidinvperiodid"]').val().trim()),
                        InvoicePeriod: $(this).parent().find('input[name="hidinvperiod"]').val().trim(),
                        Fee: parseFloat($(this).parent().find('input[name="hidinvfee"]').val().trim()),
                        PayOrder: parseFloat($(this).parent().find('input[name="hidinvserno"]').val().trim())
                    });
                }
            });
            if (invoicedetails.length <= 0) {
                swal("Failed!", "Please select the month(s) to pay!", "error", {
                    icon: "error"
                });
                loader();
                return false;
            }
            if (parseFloat($('#txtPaid').val()) <= 0) {
                swal("Failed!", "Please select the month(s) to pay!", "error", {
                    icon: "error"
                });
                loader();
                return false;
            }

            var invoiceobj = {
                PlayerId: $('#PlayerId').val(),
                TotalFee: parseFloat($('#txtTotalFee').val()),
                TotalOtherAmount: parseFloat($('#txtLateFee').val()),
                TotalDiscount: parseFloat($('#txtDiscount').val()),
                TotalPaidAmount: parseFloat($('#txtPaid').val()),
                PaymentId: $('select[name="PaymentMode"]').val(),
                Comments: $('#txtComments').val(),
                TransactionNo: $('#PaymentMode').val() != "1" ? $('#TransactionNo').val() : '',
                TransactionDate: $('#PaymentMode').val() != "1" ? $('#TransactionDate').val() : null,
                InvoiceDate: $('#InvoiceDate').val(),
                ReceivedBy: $('select[name="ReceivedBy"]').val(),
                InvoiceDetails: invoicedetails
            }
            var _message = validatePaidAmount(invoiceobj);
            if (_message == success) {
                if (checkForClosingPrevInv(invoiceobj)) {
                    swal({
                        type: 'info',
                        title: 'Closing Invoice',
                        text: 'Some of the invoice(s) will be closed automatically!'
                    }).then(() => {
                        save(invoiceobj);
                    });
                }
                else {
                    save(invoiceobj);
                }
            }
            else {
                swal("Failed!", _message, "error", {
                    icon: "error"
                });
                loader();
                return false;
            }
        } catch (e) {
            swal("Failed!", e.message, "error", {
                icon: "error"
            });
            loader();
            return false;
        }

    }
    function save(invoiceobj) {
        $.ajax({
            type: "POST",
            url: 'Transaction/Invoice/Payment',
            data: JSON.stringify(invoiceobj),
            datatype: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                loader();
                if (response) {
                    swal({
                        title: "Success!",
                        text: "Paid sucessfully!",
                        type: "success",
                        icon: "success",
                        showCancelButton: false,
                        confirmButtonClass: "btn-success",
                        confirmButtonText: "Ok!",
                        closeOnConfirm: false
                    }).then(function () {
                        $('#invocemodel').modal('hide');
                    });
                }
                else {
                    swal("Failed!", "Payment failed!", "error", {
                        icon: "error"
                    });
                }
            },
            error: function (jqXHR, exception) {
                loader();
                swal("Failed!", "Payment failed! -" + exception, "error", {
                    icon: "error"
                });
            }
        });
    }
    function validatePaidAmount(_invoice) {
        if (_invoice.InvoiceDetails.length > 1) {
            if (parseFloat($('#txtDiscount').val()) > 0) {
                return "Not Allowed to select multiple months with discount!";
            }
            var sortedDetails = _.sortBy(_invoice.InvoiceDetails, ['BatchId', 'PayOrder']);
            var objDetails = _.last(sortedDetails);
            if ((_invoice.TotalFee - objDetails.Fee) > _invoice.TotalPaidAmount) {
                return "Paid Amount is insufficient!";
            }
        }
        return success;
    }
    function checkForClosingPrevInv(_invoice) {
        var _sortedDetails = _.sortBy(_invoice.InvoiceDetails, ['BatchId', 'PayOrder']);
        var _batchIds = _.countBy(_sortedDetails, "BatchId");
        var _valid = false;
        _.each(_batchIds, function (value, key) {
            if (_valid) {
                var _batchDetail = _.filter(_sortedDetails, { "BatchId": parseInt(key) })
                for (var i = 1; i < _batchDetail.length; i++) {
                    if (_batchDetail[0].PayOrder != 1 && _valid) {
                        _valid = true;
                    }
                    else {
                        if (_batchDetail[i].PayOrder !== _batchDetail[i - 1].PayOrder && _batchDetail[i].PayOrder != _batchDetail[i - 1].PayOrder + 1 && _valid)
                            _valid = true;
                    }
                }
            }
        });
        return _valid;
    }
</script>
